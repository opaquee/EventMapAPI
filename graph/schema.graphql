scalar Upload
scalar Time

type Event {
    id: ID!
    name: String!
    description: String!
    addressLine1: String!
    addressLine2: String!
    city: String!
    state: String!
    zip: Int!
    latitude: Float!
    longitude: Float!
    startDate: Time!
    endDate: Time!
    users: [User]
}


input NewEvent {
    name: String!
    description: String!
    addressLine1: String!
    addressLine2: String!
    city: String!
    state: String!
    zip: Int!
    startDate: Time!
    endDate: Time!
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    username: String!
    password: String!
    profilePicture: Upload
    events: [Event]
}

input NewUser {
    firstName: String!
    lastName: String!
    email: String!
    username: String!
    password: String!
}

input Login {
    username: String!
    password: String!
}

input RefreshTokenInput {
    token: String!
}

input updateUserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}

type Query {
    getAllNearbyEvents(latitude: Float!, longitude: Float!): [Event]
    getEventUsers: [User]
    getEventById(eventId: Int!): Event!
    getUserById(userId: Int!): User!
}

type Mutation {
    createUser(input: NewUser!): String!
    updateUser(username: String!, input: updateUserInput!): User!
    deleteUser(username: String!): Boolean!
    
    login(input: Login!): String!
    refreshToken(input: RefreshTokenInput!): String!

    createEvent(input: NewEvent!): Event!
    updateEvent(input: NewEvent!): Event!
    deleteEvent(eventId: Int!): Boolean!

    addUserProfilePicture(profilePicture: Upload!): User!
    removeUserProfilePicture(userId: Int!): Boolean!

    addUserToEvent(userId: Int!, eventId: Int!): Event!
    removeUserFromEvent(userId: Int!, eventId: Int!): Boolean!
}




