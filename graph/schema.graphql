scalar Upload
scalar Time

type Event {
    id: Int!
    name: String!
    description: String!
    addressLine1: String!
    addressLine2: String!
    city: String!
    state: String!
    zip: Int!
    latitude: Float!
    longitude: Float!
    startDate: Time!
    endDate: Time!
    users: [User]
}

input NewEvent {
    name: String!
    description: String!
    addressLine1: String!
    addressLine2: String!
    city: String!
    state: String!
    zip: Int!
    startDate: String!
    endDate: String!
}

type User {
    id: Int!
    firstName: String!
    lastName: String!
    email: String!
    username: String!
    password: String!
    profilePicture: Upload!
    events: [Event]
}

input NewUser {
    firstName: String!
    lastName: String!
    email: String!
    username: String!
    password: String!
    profilePicture: Upload!
}

type School {
    id: Int!
    name: String!
    events: [Event]
    users: [User]
}

input NewSchool {
    name: String!
}

type Query {
    events: [Event]
}

type Mutation {
    createEvent(input: NewEvent!): Event!
}